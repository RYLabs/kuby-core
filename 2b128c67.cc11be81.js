(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{63:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return s})),t.d(n,"metadata",(function(){return o})),t.d(n,"rightToc",(function(){return l})),t.d(n,"default",(function(){return u}));var r=t(2),a=t(6),i=(t(0),t(90)),s={id:"creating-plugins",title:"Creating Your Own Plugins",sidebar_label:"Creating Your Own Plugins",slug:"/creating-plugins"},o={unversionedId:"creating-plugins",id:"creating-plugins",isDocsHomePage:!1,title:"Creating Your Own Plugins",description:"Kuby features a plugin system that makes it easy to add your own functionality. In fact, much of Kuby's own feature set is implemented as a series of plugins.",source:"@site/docs/creating_plugins.md",slug:"/creating-plugins",permalink:"/docs/docs/creating-plugins",editUrl:"https://github.com/getkuby/kuby-docs/edit/master/docs/creating_plugins.md",version:"current",sidebar_label:"Creating Your Own Plugins",sidebar:"sidebar",previous:{title:"TLS Certificates",permalink:"/docs/docs/tls-certificates"}},l=[{value:"Anatomy of a Plugin",id:"anatomy-of-a-plugin",children:[]},{value:"Registering Your Plugin",id:"registering-your-plugin",children:[]},{value:"Plugin Lifecycle Methods",id:"plugin-lifecycle-methods",children:[]},{value:"Creating Custom Resources",id:"creating-custom-resources",children:[]}],c={rightToc:l};function u(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Kuby features a plugin system that makes it easy to add your own functionality. In fact, much of Kuby's own feature set is implemented as a series of plugins."),Object(i.b)("h2",{id:"anatomy-of-a-plugin"},"Anatomy of a Plugin"),Object(i.b)("p",null,"Plugins are just Ruby classes that inherit from ",Object(i.b)("inlineCode",{parentName:"p"},"Kuby::Plugin"),". The plugin interface, i.e. the methods plugins are expected to respond to, are summarized below."),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},"configure(&block)"),": Called when the plugin is added to a Kuby environment. In other words:"),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ruby"}),"Kuby.define('my-app') do\n  environment(:production) do\n    add_plugin(:my_plugin) do\n      # at this point, the plugin's `configure' method is called\n      # and handed this block\n    end\n  end\nend\n"))),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},"setup()"),": Called during setup, i.e. whenever the ",Object(i.b)("inlineCode",{parentName:"p"},"kuby setup")," command is executed.")),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},"resources()"),": Expected to return an array of ",Object(i.b)("inlineCode",{parentName:"p"},"KubeDSL::DSLObject")," objects. See below for additional information regarding creating custom Kubernetes resource objects."))),Object(i.b)("h2",{id:"registering-your-plugin"},"Registering Your Plugin"),Object(i.b)("p",null,"Plugins must be registered with Kuby's plugin system before they can be used. Register your plugin like so:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ruby"}),"Kuby.register_plugin(:my_plugin, MyPlugin)\n")),Object(i.b)("h2",{id:"plugin-lifecycle-methods"},"Plugin Lifecycle Methods"),Object(i.b)("p",null,"In addition to the methods described above, plugins should also respond to a series of lifecycle methods summarized below."),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},Object(i.b)("inlineCode",{parentName:"li"},"after_configuration()"),": Called after all plugins have been configured."),Object(i.b)("li",{parentName:"ol"},Object(i.b)("inlineCode",{parentName:"li"},"before_setup()"),": Called before any plugins have been setup."),Object(i.b)("li",{parentName:"ol"},Object(i.b)("inlineCode",{parentName:"li"},"after_setup()"),": Called after all plugins have been setup."),Object(i.b)("li",{parentName:"ol"},Object(i.b)("inlineCode",{parentName:"li"},"before_deploy(manifest)"),": Called before deploying any resources. The ",Object(i.b)("inlineCode",{parentName:"li"},"manifest")," argument is an instance of ",Object(i.b)("inlineCode",{parentName:"li"},"Kuby::Kubernetes::Manifest")," and contains a list of all the Kubernetes resources Kuby intends to deploy."),Object(i.b)("li",{parentName:"ol"},Object(i.b)("inlineCode",{parentName:"li"},"after_deploy(manifest)"),": Called after deploying all resources. The ",Object(i.b)("inlineCode",{parentName:"li"},"manifest")," argument is an instance of ",Object(i.b)("inlineCode",{parentName:"li"},"Kuby::Kubernetes::Manifest")," and contains a list of all the Kubernetes resources Kuby has just deployed.")),Object(i.b)("h2",{id:"creating-custom-resources"},"Creating Custom Resources"),Object(i.b)("p",null,"Kuby uses ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/getkuby/kube-dsl"}),"KubeDSL")," to define Kubernetes resources in Ruby code. KubeDSL is a complete representation of the Kubernetes schema, so it's possible to create any kind of Kubernetes resource. For example, here's a snippet of the code inside the Rails app plugin that creates a ",Object(i.b)("inlineCode",{parentName:"p"},"ServiceAccount"),":"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ruby"}),'spec = self\n\nKubeDSL.service_account do\n  metadata do\n    name "#{spec.selector_app}-sa"\n    namespace spec.namespace.metadata.name\n\n    labels do\n      add :app, spec.selector_app\n      add :role, spec.role\n    end\n  end\nend\n')),Object(i.b)("p",null,"For those resources that are not part of the standard Kubernetes schema (i.e. custom resource definitions or CRDs), use KubeDSL to define custom objects. Here's an example from the cert-manager plugin."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ruby"}),'class ClusterIssuer < KubeDSL::DSLObject\n  object_field(:metadata) { KubeDSL::DSL::Meta::V1::ObjectMeta.new }\n  object_field(:spec) { ClusterIssuerSpec.new }\n\n  def serialize\n    {}.tap do |result|\n      result[:apiVersion] = "cert-manager.io/v1alpha2"\n      result[:kind] = "ClusterIssuer"\n      result[:metadata] = metadata.serialize\n      result[:spec] = spec.serialize\n    end\n  end\n\n  def kind_sym\n    :cluster_issuer\n  end\nend\n')),Object(i.b)("p",null,"The cert-manager plugin includes an instance of this new ",Object(i.b)("inlineCode",{parentName:"p"},"ClusterIssuer")," object in its list of Kubernetes resources. Here's an (abbreviated) version of the cert-manager plugin to show a complete example:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ruby"}),"class CertManager < Kuby::Plugin\n  def cluster_issuer\n    @cluster_issuer ||= ClusterIssuer.new do\n      metadata do\n        name 'production-cert'\n        namespace 'cert-manager'\n      end\n\n      #  rest omitted for brevity\n    end\n  end\n\n  def resources\n    [cluster_issuer]\n  end\nend\n\nKuby.register_plugin(:cert_manager, CertManager)\n")))}u.isMDXComponent=!0},90:function(e,n,t){"use strict";t.d(n,"a",(function(){return b})),t.d(n,"b",(function(){return m}));var r=t(0),a=t.n(r);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=a.a.createContext({}),u=function(e){var n=a.a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},b=function(e){var n=u(e.components);return a.a.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},d=a.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),b=u(t),d=r,m=b["".concat(s,".").concat(d)]||b[d]||p[d]||i;return t?a.a.createElement(m,o(o({ref:n},c),{},{components:t})):a.a.createElement(m,o({ref:n},c))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,s=new Array(i);s[0]=d;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var c=2;c<i;c++)s[c]=t[c];return a.a.createElement.apply(null,s)}return a.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"}}]);