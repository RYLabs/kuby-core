# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/jsonpath/all/jsonpath.rbi
#
# jsonpath-0.9.9

class JsonPath
  def [](obj_or_str, mode = nil); end
  def deep_clone; end
  def enum_on(obj_or_str, mode = nil); end
  def find_matching_brackets(token, scanner); end
  def first(obj_or_str, *args); end
  def initialize(path, opts = nil); end
  def join(join_path); end
  def on(obj_or_str, opts = nil); end
  def path; end
  def path=(arg0); end
  def self.for(obj_or_str); end
  def self.on(obj_or_str, path, opts = nil); end
  def self.process_object(obj_or_str); end
end
class JsonPath::Proxy
  def _compact(obj, path); end
  def _deep_copy; end
  def _delete(obj, path); end
  def _gsub(obj, path, replacement); end
  def _remove(obj); end
  def compact!(path = nil); end
  def compact(path = nil); end
  def delete!(path = nil); end
  def delete(path = nil); end
  def gsub!(path, replacement = nil, &replacement_block); end
  def gsub(path, replacement = nil, &replacement_block); end
  def initialize(obj); end
  def obj; end
  def to_hash; end
end
class JsonPath::Enumerable
  def each(context = nil, key = nil, pos = nil, &blk); end
  def ensure_exclusive_end_index(value); end
  def handle_question_mark(sub_path, node, pos, &blk); end
  def handle_wildecard(node, expr, _context, _key, pos, &blk); end
  def initialize(path, object, mode, options = nil); end
  def process_function_or_literal(exp, default = nil); end
  def yield_value(blk, context, key); end
  include Enumerable
end
class JsonPath::Parser
  def dig(keys, hash); end
  def initialize(node); end
  def parse(exp); end
  def parse_exp(exp); end
end
