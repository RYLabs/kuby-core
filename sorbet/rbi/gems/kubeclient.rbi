# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/kubeclient/all/kubeclient.rbi
#
# kubeclient-4.7.0

module Kubeclient
end
class Kubeclient::AmazonEksCredentials
  def self.token(credentials, eks_cluster); end
end
class Kubeclient::AmazonEksCredentials::AmazonEksDependencyError < LoadError
end
module Kubeclient::ClientMixin
  def all_entities(options = nil); end
  def api; end
  def api_endpoint; end
  def api_valid?; end
  def auth_options; end
  def bearer_token(bearer_token); end
  def build_namespace_prefix(namespace); end
  def create_entity(entity_type, resource_name, entity_config); end
  def create_rest_client(path = nil); end
  def define_entity_methods; end
  def delete_entity(resource_name, name, namespace = nil, delete_options: nil); end
  def discover; end
  def discovered; end
  def discovery_needed?(method_sym); end
  def fetch_entities; end
  def format_datetime(value); end
  def format_response(as, body, list_type = nil); end
  def get_entities(entity_type, resource_name, options = nil); end
  def get_entity(resource_name, name, namespace = nil, options = nil); end
  def get_pod_log(pod_name, namespace, container: nil, previous: nil, timestamps: nil, since_time: nil, tail_lines: nil, limit_bytes: nil); end
  def handle_exception; end
  def handle_uri(uri, path); end
  def headers; end
  def http_max_redirects; end
  def http_options(uri); end
  def http_proxy_uri; end
  def initialize_client(uri, path, version, ssl_options: nil, auth_options: nil, socket_options: nil, timeouts: nil, http_proxy_uri: nil, http_max_redirects: nil, as: nil); end
  def load_entities; end
  def method_missing(method_sym, *args, &block); end
  def patch_entity(resource_name, name, patch, strategy, namespace); end
  def process_template(template); end
  def proxy_url(kind, name, port, namespace = nil); end
  def respond_to_missing?(method_sym, include_private = nil); end
  def rest_client; end
  def return_or_yield_to_watcher(watcher, &block); end
  def self.parse_definition(kind, name); end
  def self.resolve_unconventional_method_names(name, kind, singular_name); end
  def self.underscore_entity(entity_name); end
  def ssl_options; end
  def update_entity(resource_name, entity_config); end
  def validate_auth_options(opts); end
  def validate_bearer_token_file; end
  def watch_entities(resource_name, options = nil, &block); end
  def watch_pod_log(pod_name, namespace, container: nil, &block); end
end
class Kubeclient::Config
  def allow_external_lookups?; end
  def context(context_name = nil); end
  def contexts; end
  def expand_command_option(config, key); end
  def ext_command_path(path); end
  def ext_file_path(path); end
  def fetch_cluster_ca_data(cluster); end
  def fetch_context(context_name); end
  def fetch_token_from_provider(auth_provider); end
  def fetch_user_auth_options(user); end
  def fetch_user_cert_data(user); end
  def fetch_user_key_data(user); end
  def initialize(data, kcfg_path); end
  def self.read(filename); end
end
class Kubeclient::Config::Context
  def api_endpoint; end
  def api_version; end
  def auth_options; end
  def initialize(api_endpoint, api_version, ssl_options, auth_options, namespace); end
  def namespace; end
  def ssl_options; end
end
module Kubeclient::Common
end
class Kubeclient::Common::EntityList < Anonymous_Delegator_1
  def continue; end
  def initialize(kind, resource_version, list, continue = nil); end
  def kind; end
  def last?; end
  def resourceVersion; end
end
class Kubeclient::ExecCredentials
  def self.map_env(env); end
  def self.token(opts); end
  def self.validate_credentials(opts, creds); end
  def self.validate_opts(opts); end
end
class Kubeclient::GoogleApplicationDefaultCredentials
  def self.token; end
end
class Kubeclient::GoogleApplicationDefaultCredentials::GoogleDependencyError < LoadError
end
class Kubeclient::GCPCommandCredentials
  def self.extract_token(output, token_key); end
  def self.token(config); end
end
class Kubeclient::GCPAuthProvider
  def self.token(config); end
end
class KubeException < StandardError
  def error_code; end
  def initialize(error_code, message, response); end
  def message; end
  def response; end
  def to_s; end
end
class Kubeclient::HttpError < KubeException
end
class Kubeclient::Common::MissingKindCompatibility
  def self.resource_kind(name); end
end
class Kubeclient::OIDCAuthProvider
  def self.expired?(id_token, discovery); end
  def self.token(provider_config); end
end
class Kubeclient::OIDCAuthProvider::OpenIDConnectDependencyError < LoadError
end
class Kubeclient::Resource < RecursiveOpenStruct
  def initialize(hash = nil, args = nil); end
end
class Kubeclient::ResourceNotFoundError < Kubeclient::HttpError
end
class Kubeclient::Common::WatchStream
  def build_client; end
  def build_client_options; end
  def each; end
  def finish; end
  def follow_option; end
  def initialize(uri, http_options, formatter:); end
  def max_hops; end
  def using_proxy; end
end
class Kubeclient::Client
  def initialize(uri, version = nil, **options); end
  include Kubeclient::ClientMixin
end
